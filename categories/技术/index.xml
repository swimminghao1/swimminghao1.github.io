<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>技术 on swimminghao</title>
    <link>https://swimminghao1.github.io/categories/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on swimminghao</description>
    <image>
      <url>https://swimminghao1.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://swimminghao1.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 22 Mar 2023 09:10:00 +0000</lastBuildDate><atom:link href="https://swimminghao1.github.io/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>photoshop技巧</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/18_01_photoshop/photoshop%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Wed, 22 Mar 2023 09:10:00 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/18_01_photoshop/photoshop%E6%8A%80%E5%B7%A7/</guid>
      <description>photoshop技巧 选区更换颜色 选区-&amp;gt;编辑-&amp;gt;填充-&amp;gt;颜色-&amp;gt;选择颜色-&amp;gt;确定</description>
    </item>
    
    <item>
      <title>hexo-start</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/17_01_%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/hexo-start/</link>
      <pubDate>Fri, 24 Jun 2022 01:10:00 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/17_01_%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/hexo-start/</guid>
      <description>摘要内容&amp;hellip;&amp;hellip; 以下为隐藏内容 hexo-start Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post</description>
    </item>
    
    <item>
      <title>renren-fast开发文档3.0最新版</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_04_spring/%E8%84%9A%E6%89%8B%E6%9E%B6/renren-fast%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A33.0%E6%9C%80%E6%96%B0%E7%89%88/</link>
      <pubDate>Wed, 16 Mar 2022 10:05:00 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_04_spring/%E8%84%9A%E6%89%8B%E6%9E%B6/renren-fast%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A33.0%E6%9C%80%E6%96%B0%E7%89%88/</guid>
      <description>renren-fast开发文档3.0最新版 版权说明 本文档为付费文档，版权归人人开源（renren.io）所有，并保留一切权利，本文档及其描述</description>
    </item>
    
    <item>
      <title>Spring Boot 2.0 集成 redis</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_04_spring/spring-boot-2.0-%E9%9B%86%E6%88%90-redis/</link>
      <pubDate>Wed, 16 Mar 2022 10:05:00 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_04_spring/spring-boot-2.0-%E9%9B%86%E6%88%90-redis/</guid>
      <description>从 Spring Boot 2.x 开始 Lettuce 已取代 Jedis 成为首选 Redis 的客户端。当然 Spring Boot 2.x 仍然支持 Jedis，并且你可以任意切换客户端。 Lettuce Lettuce 是一个可伸缩的线程安全的 Redis 客户端，支持</description>
    </item>
    
    <item>
      <title>超详细从0开始搭建 Spring Boot 项目</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_04_spring/%E8%B6%85%E8%AF%A6%E7%BB%86%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAspring-boot-%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Mon, 14 Mar 2022 17:11:00 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_04_spring/%E8%B6%85%E8%AF%A6%E7%BB%86%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAspring-boot-%E9%A1%B9%E7%9B%AE/</guid>
      <description>超详细从0开始搭建 Spring Boot 项目 这个项目，我是打算作为种子项目的，作为种子项目，必须的“开箱即用”，必须要包含大部分 web 开发的相关功能，后期所有的 Spring</description>
    </item>
    
    <item>
      <title>1、【对线面试官】今天来聊聊Java注解</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/1%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E4%BB%8A%E5%A4%A9%E6%9D%A5%E8%81%8A%E8%81%8Ajava%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Sun, 06 Mar 2022 09:10:00 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/1%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E4%BB%8A%E5%A4%A9%E6%9D%A5%E8%81%8A%E8%81%8Ajava%E6%B3%A8%E8%A7%A3/</guid>
      <description>1、【对线面试官】今天来聊聊Java注解 什么是注解？ 注解在我的理解下，就是代码中的特殊标记，这些标记可以在编译、类加载、运行时被读取，并执行</description>
    </item>
    
    <item>
      <title>Hexo博客进阶：为 Next 主题添加 Waline 评论系统</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/17_01_%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/hexo%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6%E4%B8%BA-next-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0-waline-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Wed, 02 Mar 2022 15:10:00 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/17_01_%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/hexo%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6%E4%B8%BA-next-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0-waline-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</guid>
      <description>Hexo博客进阶：为 Next 主题添加 Waline 评论系统 发表于 2022-01-20 分类于 Hexo博客 阅读次数： 44 Waline： 本文字数： 2.2k 阅读时长 ≈ 4 分钟 文章发出之后，往往我</description>
    </item>
    
    <item>
      <title>经典动态规划：打家劫舍系列问题</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</link>
      <pubDate>Tue, 01 Mar 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</guid>
      <description>经典动态规划：打家劫舍系列问题 打家劫舍系列总共有三道，难度设计非常合理，层层递进。第一道是比较标准的动态规划问题，而第二道融入了环形数组的条</description>
    </item>
    
    <item>
      <title>Hexo-Next 主题博客个性化配置(2022年更新版本)</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/17_01_%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/hexo-next-%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE2022%E5%B9%B4%E6%9B%B4%E8%A1%8C%E7%89%88%E6%9C%AC/</link>
      <pubDate>Tue, 01 Mar 2022 09:10:00 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/17_01_%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/hexo-next-%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE2022%E5%B9%B4%E6%9B%B4%E8%A1%8C%E7%89%88%E6%9C%AC/</guid>
      <description>Hexo-Next 主题博客个性化配置(2022年更行版本) 网页预览： swimminghao.netlify.app 因为本人比较喜欢简介风格的，所以整个界面都是简约风格的，一个好的博客，应该让人一眼就能</description>
    </item>
    
    <item>
      <title>使用 Docker 部署 Halo 和 MySQL</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/17_01_%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/%E4%BD%BF%E7%94%A8-docker-%E9%83%A8%E7%BD%B2-halo-%E5%92%8C-mysql/</link>
      <pubDate>Tue, 01 Mar 2022 09:10:00 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/17_01_%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/%E4%BD%BF%E7%94%A8-docker-%E9%83%A8%E7%BD%B2-halo-%E5%92%8C-mysql/</guid>
      <description>版本：1.6 使用 Docker 部署 Halo 和 MySQL 简介 该章节我们将分三种情况为您说明该如何同时使用 Docker + MySQL 来部署 Halo 前提条件： 我们默认您的机器上已经安装好 Docker 如果你想完</description>
    </item>
    
    <item>
      <title>10、【对线面试官】TreadLocal</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/10%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98treadlocal/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/10%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98treadlocal/</guid>
      <description>10、【对线面试官】TreadLocal 今天要不来聊聊ThreadLocal吧？ 我个人对ThreadLocal理解就是 它能够提供了线程的局部</description>
    </item>
    
    <item>
      <title>11、【对线面试官】CountDownLatch和CyclicBarrier</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/11%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98countdownlatch%E5%92%8Ccyclicbarrier/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/11%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98countdownlatch%E5%92%8Ccyclicbarrier/</guid>
      <description>11、【对线面试官】CountDownLatch和CyclicBarrier 我现在有个场景：现在我有50个任务，这50个任务在完成之后，才能</description>
    </item>
    
    <item>
      <title>12、【对线面试官】List</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/12%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98list/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/12%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98list/</guid>
      <description>12、【对线面试官】List 要不今天来讲讲Java的List吧，你对List了解多少？ List在Java里边是一个接口，常见的实现类有Arr</description>
    </item>
    
    <item>
      <title>13、【对线面试官】Map</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/13%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98map/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/13%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98map/</guid>
      <description>13、【对线面试官】Map 今天来讲讲Map吧，你对Map了解多少？就讲JDK1.8就好咯 Map在Java里边是一个接口，常见的实现类有Has</description>
    </item>
    
    <item>
      <title>14、【对线面试官】SpringMVC</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/14%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98springmvc/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/14%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98springmvc/</guid>
      <description>14、【对线面试官】SpringMVC 今天要不来聊聊SpringMVC吧？ 我先简单说下我对SpringMVC的理解哈 SpringMVC我觉得</description>
    </item>
    
    <item>
      <title>15、【对线面试官】Spring基础</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/15%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98spring%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/15%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98spring%E5%9F%BA%E7%A1%80/</guid>
      <description>15、【对线面试官】Spring基础 要不你来讲讲Spring的IOC和AOP你是怎么理解的呗？ 我个人理解下：SpringIOC解决的是对象管</description>
    </item>
    
    <item>
      <title>16、【对线面试官】SpringBean生命周期</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/16%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98springbean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/16%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98springbean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>16、【对线面试官】SpringBean生命周期 今天要不来聊聊Spring对Bean的生命周期管理？ 嗯，没问题的。 很早之前我就看过源码，但S</description>
    </item>
    
    <item>
      <title>17、【对线面试官】Redis基础</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/17%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98redis%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/17%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98redis%E5%9F%BA%E7%A1%80/</guid>
      <description>17、【对线面试官】Redis基础 你先来讲讲为什么要用Redis吧？ 我个人是这样理解的：无论Redis也好、MySQL也好、HDFS也好、H</description>
    </item>
    
    <item>
      <title>18、【对线面试官】Redis持久化</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/18%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98redis%E6%8C%81%E4%B9%85%E5%8C%96/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/18%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98redis%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
      <description>18、【对线面试官】Redis持久化 嗯，开始吧，今天要不来聊聊Redisl的持久化机制吧？ 在上一次面试已经说过了Redis：是基于内存的 假设</description>
    </item>
    
    <item>
      <title>19、【对线面试官】kafka基础</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/19%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98kafka%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/19%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98kafka%E5%9F%BA%E7%A1%80/</guid>
      <description>19、【对线面试官】kafka基础 今天要不来聊聊消息队列吧？我看你项目不少地方都写到Kafka了.你简单说明下你使用Kafka的场景吧 使用消</description>
    </item>
    
    <item>
      <title>2、【对线面试官】今天来聊聊Java泛型</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/2%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E4%BB%8A%E5%A4%A9%E6%9D%A5%E8%81%8A%E8%81%8Ajava%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/2%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E4%BB%8A%E5%A4%A9%E6%9D%A5%E8%81%8A%E8%81%8Ajava%E6%B3%9B%E5%9E%8B/</guid>
      <description>#2、【对线面试官】今天来聊聊Java泛型 泛型了解 在Java中的泛型简单来说就是：在创建对象或调用方法的时候才明确下具体的类型 使用泛型的好处</description>
    </item>
    
    <item>
      <title>20、【对线面试官】使用kafka会考虑什么问题</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/20%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E4%BD%BF%E7%94%A8kafka%E4%BC%9A%E8%80%83%E8%99%91%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/20%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E4%BD%BF%E7%94%A8kafka%E4%BC%9A%E8%80%83%E8%99%91%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98/</guid>
      <description>20、【对线面试官】使用kafka会考虑什么问题 你提到了你这边会从交易的消息报获取到订单的数据，然后做业务的处理；也提到了你用的是Kafka</description>
    </item>
    
    <item>
      <title>21、【对线面试官】Mysql索引</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/21%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98mysql%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/21%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98mysql%E7%B4%A2%E5%BC%95/</guid>
      <description>21、【对线面试官】Mysql索引 我看你简历上写了MySQL，对MySQL InnoDB引擎的索引了解吗？ 嗯啊，使用索引可以加快查询速度，其实</description>
    </item>
    
    <item>
      <title>23、【对线面试官】InnoDB引擎中的事务</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/22%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98mysql%E4%BA%8B%E5%8A%A1-%E9%94%81%E6%9C%BA%E5%88%B6-mvcc/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/22%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98mysql%E4%BA%8B%E5%8A%A1-%E9%94%81%E6%9C%BA%E5%88%B6-mvcc/</guid>
      <description>这次我想问下，你是怎么理解InnoDB引擎中的事务的？ 在我的理解下，事务可以使「一组操作」要么全部成功，要么全部失败 事务其目的是为了「保证数</description>
    </item>
    
    <item>
      <title>23、【对线面试官】Mysql调优</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/23%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98mysql%E8%B0%83%E4%BC%98/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/23%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98mysql%E8%B0%83%E4%BC%98/</guid>
      <description>23、【对线面试官】Mysql调优 要不你来讲讲你们对MySQL是怎么调优的？ 哇，这命题很大阿…我认为，对于开发者而言，对MySQL的调优重点</description>
    </item>
    
    <item>
      <title>24、【对线面试官】为什么需要Java内存模型</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/24%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/24%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description>24、【对线面试官】为什么需要Java内存模型 今天想跟你聊聊Java内存模型，这块你了解过吗？ 嗯，我简单说下我的理解吧。那我就从为什么要有J</description>
    </item>
    
    <item>
      <title>25、【对线面试官】java从编译到执行，发生了什么</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/25%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98java%E4%BB%8E%E7%BC%96%E8%AF%91%E5%88%B0%E6%89%A7%E8%A1%8C%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/25%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98java%E4%BB%8E%E7%BC%96%E8%AF%91%E5%88%B0%E6%89%A7%E8%A1%8C%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</guid>
      <description>25、【对线面试官】java从编译到执行，发生了什么 从基础先问起吧，你是怎么理解Java是一门「跨平台」的语言，也就是「一次编译，到处运行的</description>
    </item>
    
    <item>
      <title>26、【对线面试官】双亲委派机制</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/26%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/26%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6/</guid>
      <description>26、【对线面试官】双亲委派机制 接着上次的话题吧，要不你来详细讲讲双亲委派机制？ 上次提到了：class文件是通过「类加载器」装载至JVM中的</description>
    </item>
    
    <item>
      <title>27、【对线面试官】深入浅出Java内存模型</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/27%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAjava%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/27%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAjava%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description>27、【对线面试官】深入浅出Java内存模型 上一次已经问过了为什么要有Java内存模型 答案是：Java为了屏蔽硬件和操作系统访问内存的各种差</description>
    </item>
    
    <item>
      <title>28、【对线面试官】JVM内存模型</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/28%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98jvm%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/28%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98jvm%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description>28、【对线面试官】JVM内存模型 聊聊JVM的内存结构吧？ class文件会被类加载器装载至JVM中，并且JVM会负责程序「运行时」的「内存管</description>
    </item>
    
    <item>
      <title>29、【对线面试官】垃圾回收机制</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/29%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/29%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid>
      <description>29、【对线面试官】垃圾回收机制 聊聊Java的垃圾回收机制? 我们使用Java的时候，会创建很多对象，但我们未曾「手动」将这些对象进行清除,而</description>
    </item>
    
    <item>
      <title>3、【对线面试官】Java NIO</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/3%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98java-nio/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/3%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98java-nio/</guid>
      <description>3、【对线面试官】Java NIO 这次咱们就来聊聊Java的NIO呗？你对NIO有多少了解？ 嗯，我对Java NIO还是有一定的了解的，NIO是JD</description>
    </item>
    
    <item>
      <title>30、【对线面试官】CMS垃圾回收器</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/30%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98cms%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/30%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98cms%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</guid>
      <description>30、【对线面试官】CMS垃圾回收器 今天还是来聊聊CMS垃圾收集器呗？ 如果用Seria和 Parallel系列的垃圾收集器：在垃圾回收的时，用</description>
    </item>
    
    <item>
      <title>31、【对线面试官】G1垃圾收集器</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/31%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98g1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/31%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98g1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</guid>
      <description>31、【对线面试官】G1垃圾收集器 要不这次来聊聊G1垃圾收集器？ CMS垃圾收集器的升级 G1垃圾收集器可以给你设定一个你希望Stop The Word</description>
    </item>
    
    <item>
      <title>32、【对线面试官】如何实现幂等和去重？</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/32%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%B9%82%E7%AD%89%E5%92%8C%E5%8E%BB%E9%87%8D/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/32%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%B9%82%E7%AD%89%E5%92%8C%E5%8E%BB%E9%87%8D/</guid>
      <description>如何实现去重和幂等 去重与幂等 区别 「去重」是对请求或者消息在「一定时间内」进行去重「N次」 「幂等」则是保证请求或消息在「任意时间内」进行处理，</description>
    </item>
    
    <item>
      <title>33、【对线面试官】Redis主从架构</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/33%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98redis%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/33%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98redis%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84/</guid>
      <description>33、【对线面试官】Redis主从架构 要不你来讲讲你公司的Redis是什么架构的咯？ 我前公司的Redis架构是「分片集群」，使用的是「Pro</description>
    </item>
    
    <item>
      <title>34、【对线面试官】Redis分片集群</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/34%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98redis%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/34%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98redis%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4/</guid>
      <description>34、【对线面试官】Redis分片集群 要不接着上一次的话题呗？聊下Redis的分片集群，先聊Redis Clusters好咯？ 基础 在前面聊Re</description>
    </item>
    
    <item>
      <title>35、【对线面试官】系统需求多变时，如何设计</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/35%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E7%B3%BB%E7%BB%9F%E9%9C%80%E6%B1%82%E5%A4%9A%E5%8F%98%E6%97%B6%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/35%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E7%B3%BB%E7%BB%9F%E9%9C%80%E6%B1%82%E5%A4%9A%E5%8F%98%E6%97%B6%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1/</guid>
      <description>35、【对线面试官】系统需求多变时，如何设计 我现在有个系统会根据请求的入参，做出不同动作。但是，这块不同的动作很有可能是会发生需求变动的，这</description>
    </item>
    
    <item>
      <title>36、【对线面试官】设计模式</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/36%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/36%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>36、【对线面试官】设计模式 熟悉哪些常见的设计模式？ 常见的工厂模式、代理模式、模板方法模式、责任链模式、单例模式、包装设计模式、策略模式等都</description>
    </item>
    
    <item>
      <title>37、【对线面试官】JVM调优</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/37%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98jvm%E8%B0%83%E4%BC%98/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/37%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98jvm%E8%B0%83%E4%BC%98/</guid>
      <description>JVM调优 今天要不来聊聊JVM调优相关的吧？你曾经在生产环境下有过调优JVM的经历吗？ 没有 嗯.是这样的，我们一般优化系统的思路是这样的 1.一</description>
    </item>
    
    <item>
      <title>38、【对线面试官】HTTP</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/38%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98http/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/38%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98http/</guid>
      <description>今天要不来聊聊HTTP吧 今天要不来聊聊HTTP吧？ HTTP「协议」是客户端和服务器「交互」的一种通迅的格式 所谓的「协议」实际上就是双方约定好</description>
    </item>
    
    <item>
      <title>4、【对线面试官】Java反射 &amp; 动态代理.md</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/4%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98java%E5%8F%8D%E5%B0%84-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/4%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98java%E5%8F%8D%E5%B0%84-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</guid>
      <description>4、【对线面试官】Java反射 &amp;amp; 动态代理.md 今天要不来聊聊Java反射？你对Java反射了解多少？ 嗯，Java反射在JavaSE基础中还是</description>
    </item>
    
    <item>
      <title>5、【对线面试官】多线程基础</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/5%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/5%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</guid>
      <description>5、【对线面试官】多线程基础 首先你来讲讲进程和线程的区别吧？ 进程是系统进行资源分配和调度的独立单位，每一个进程都有它自己的内存空间和系统资源</description>
    </item>
    
    <item>
      <title>6、【对线面试官】CAS</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/6%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98cas/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/6%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98cas/</guid>
      <description>6、【对线面试官】CAS 今天我们来聊聊CAS吧？你对CAS了解多少？ CAS的全称为compare and swap，比较并交换 虽然翻译过来是「比较并</description>
    </item>
    
    <item>
      <title>7、【对线面试官】synchronized</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/7%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98synchronized/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/7%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98synchronized/</guid>
      <description>7、【对线面试官】synchronized 今天我们来聊聊synchronized吧？ synchronized是一种互斥锁，一次只能允许一个线</description>
    </item>
    
    <item>
      <title>8、【对线面试官】AQS &amp; ReentrantLock</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/8%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98aqs-reentrantlock/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/8%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98aqs-reentrantlock/</guid>
      <description>8、【对线面试官】AQS &amp;amp; ReentrantLock 今天我们来聊聊lock锁吧？ 你知道什么叫做公平和非公平锁吗 公平锁指的就是：在竞争环境下，先到临界区的线程比后到的</description>
    </item>
    
    <item>
      <title>9、【对线面试官】线程池</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/9%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/9%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>9、【对线面试官】线程池 今天来聊聊线程池呗，你对Java线程池了解多少？ 或者换个问法：为什么需要线程池？ JVM在HotSpot的线程模型下，</description>
    </item>
    
    <item>
      <title>Dockerfile</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/05_01_docker/docker/dockerfile/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/05_01_docker/docker/dockerfile/</guid>
      <description>Docker相关指令 docker镜像运行以及日志 ❯ docker run --restart=always -d --name holer-client -e PARAMS=&amp;#34;www.swimminghao.top 6060 51c45156bf1c4a82b4e6ffff2150b65e&amp;#34; swimminghao/holer-client:latest ❯ docker run -d --name holer-server --restart=always --network=host -p 600:600 -p 6060:6060 -p 6443:6443 -p 11000-11010:11000-11010 swimminghao/holer-server:latest ❯ docker logs -f 1ed9a5d6f0cc Dockerfile 打包jar成docke</description>
    </item>
    
    <item>
      <title>explain结果每个字段的含义说明</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/10_01_sql/sql/explain%E7%BB%93%E6%9E%9C%E6%AF%8F%E4%B8%AA%E5%AD%97%E6%AE%B5%E7%9A%84%E5%90%AB%E4%B9%89%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/10_01_sql/sql/explain%E7%BB%93%E6%9E%9C%E6%AF%8F%E4%B8%AA%E5%AD%97%E6%AE%B5%E7%9A%84%E5%90%AB%E4%B9%89%E8%AF%B4%E6%98%8E/</guid>
      <description>explain结果每个字段的含义说明 我们都知道用explain xxx分析sql语句的性能，但是具体从explain的结果怎么分析性能以及每个</description>
    </item>
    
    <item>
      <title>git reset放弃修改&amp;放弃增加文件</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/04_01_git/git/git-reset%E6%94%BE%E5%BC%83%E4%BF%AE%E6%94%B9%E6%94%BE%E5%BC%83%E5%A2%9E%E5%8A%A0%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/04_01_git/git/git-reset%E6%94%BE%E5%BC%83%E4%BF%AE%E6%94%B9%E6%94%BE%E5%BC%83%E5%A2%9E%E5%8A%A0%E6%96%87%E4%BB%B6/</guid>
      <description>git reset放弃修改&amp;amp;放弃增加文件 1. 本地修改了一堆文件(并没有使用git add到暂存区)，想放弃修改。 单个文件/文件夹： $ git checkout -- filename 所</description>
    </item>
    
    <item>
      <title>git.html</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/04_01_git/git/git/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/04_01_git/git/git/</guid>
      <description>githtml {overflow-x: initial !important;}:root { --bg-color:#ffffff; --text-color:#333333; --select-text-bg-color:#B5D6FC; --select-text-font-color:auto; --monospace:&#34;Lucida Console&#34;,Consolas,&#34;Courier&#34;,monospace; } html { font-size: 14px; background-color: var(--bg-color); color: var(--text-color); font-family: &#34;Helvetica Neue&#34;, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; } body { margin: 0px; padding: 0px; height: auto; bottom: 0px; top: 0px; left: 0px; right: 0px; font-size: 1rem; line-height: 1.42857; overflow-x: hidden; background: inherit; tab-size: 4; } iframe { margin: auto; } a.url { word-break: break-all; } a:active, a:hover { outline:</description>
    </item>
    
    <item>
      <title>github 上传大文件100MB姿势</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/04_01_git/git/github-%E4%B8%8A%E4%BC%A0%E5%A4%A7%E4%BA%8E100mb%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/04_01_git/git/github-%E4%B8%8A%E4%BC%A0%E5%A4%A7%E4%BA%8E100mb%E6%96%87%E4%BB%B6/</guid>
      <description>github 上传大文件100MB姿势 具体就是安装git-lfs，先下载，然后就是一顿操作： 先在web建立一个空仓库 然后建立跟仓库名一样的文件夹，并执行</description>
    </item>
    
    <item>
      <title>git对比两个分支</title>
      <link>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/git%E5%AF%B9%E6%AF%94%E4%B8%A4%E4%B8%AA%E5%88%86%E6%94%AF/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/git%E5%AF%B9%E6%AF%94%E4%B8%A4%E4%B8%AA%E5%88%86%E6%94%AF/</guid>
      <description>git 对比两个分支差异 1. 显示出branch1和branch2中差异的部分 git diff branch1 branch2 --stat 2. 显示指定文件的详细差异 git diff branch1 branch2 具体文件路径 3. 显示出所有有差异</description>
    </item>
    
    <item>
      <title>git流程</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/04_01_git/git/git%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/04_01_git/git/git%E6%B5%81%E7%A8%8B/</guid>
      <description>git 流程 正常上线 git clone git checkout dev git checkout -b feature-function git add . git commit -m &amp;#39;结束功能开发&amp;#39; git checkout dev git merge feature-function git push origin dev git checkout -b release-2019-09-29 git push origin release-2019-09-29 线上发现bug 紧急上线 git checkout -b</description>
    </item>
    
    <item>
      <title>git命令</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/04_01_git/git/git%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/04_01_git/git/git%E5%91%BD%E4%BB%A4/</guid>
      <description>git指令 个人开发 一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。 workspace：工作区 I</description>
    </item>
    
    <item>
      <title>git命令作业</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/04_01_git/git/git%E5%91%BD%E4%BB%A4%E4%BD%9C%E4%B8%9A/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/04_01_git/git/git%E5%91%BD%E4%BB%A4%E4%BD%9C%E4%B8%9A/</guid>
      <description>正常上线 git clone git checkout dev git checkout -b feature-function git add . git commit -m &amp;#39;结束功能开发&amp;#39; git checkout dev git merge feature-function git push origin dev git checkout -b release-2019-09-29 git push origin release-2019-09-29 线上发现bug 紧急上线 git checkout -b hotfix-2019-09-29 origin/master git</description>
    </item>
    
    <item>
      <title>git切换分支保存修改的代码的方法</title>
      <link>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/git%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF%E4%BF%9D%E5%AD%98%E4%BF%AE%E6%94%B9%E7%9A%84%E4%BB%A3%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/git%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF%E4%BF%9D%E5%AD%98%E4%BF%AE%E6%94%B9%E7%9A%84%E4%BB%A3%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>git切换分支保存修改的代码的方法 git之 分支切换时相互影响的问题 git下分支的应用是很方便的一个功能，但是有一个问题，如果我在分支A有工作</description>
    </item>
    
    <item>
      <title>git推送文件夹到github仓库</title>
      <link>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/git%E6%8E%A8%E9%80%81%E6%96%87%E4%BB%B6%E5%A4%B9%E5%88%B0github%E4%BB%93%E5%BA%93/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/git%E6%8E%A8%E9%80%81%E6%96%87%E4%BB%B6%E5%A4%B9%E5%88%B0github%E4%BB%93%E5%BA%93/</guid>
      <description>Git推送文件夹到github仓库 有时候我们可能会遇到当文件累积到了一定程度的时候，想使用 git 进行版本管理，或者推送到 Github 等远程仓库上。本文介绍</description>
    </item>
    
    <item>
      <title>git远程分支</title>
      <link>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/git%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/git%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/</guid>
      <description>从远程仓库获取最新代码合并到本地分支 这里共展示两类三种方式。 1.git pull：获取最新代码到本地，并自动合并到当前分支 命令展示 //查询当前远程的版</description>
    </item>
    
    <item>
      <title>idea .gitignore(git文件忽略)</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/04_01_git/git/idea-.gitignoregit%E6%96%87%E4%BB%B6%E5%BF%BD%E7%95%A5/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/04_01_git/git/idea-.gitignoregit%E6%96%87%E4%BB%B6%E5%BF%BD%E7%95%A5/</guid>
      <description>idea .gitignore(git文件忽略) idea使用git通常需要忽略一些临时文件，需要配置.gitignore插件 安装插件 File -&amp;gt; Settings -&amp;gt; Plugins 搜索框</description>
    </item>
    
    <item>
      <title>JAVA</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/java/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/java/</guid>
      <description>一、基础篇 网络基础 TCP三次握手 1、OSI与TCP/IP 模型 2、常见网络服务分层 3、TCP与UDP区别及场景 4、TCP滑动窗口，拥塞控制 5、</description>
    </item>
    
    <item>
      <title>java 名词</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/java%E5%90%8D%E8%AF%8D%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8%E5%A0%86%E6%A0%88%EF%B8%8F/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/java%E5%90%8D%E8%AF%8D%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8%E5%A0%86%E6%A0%88%EF%B8%8F/</guid>
      <description>java 名词 “吃人”的那些Java名词：对象、引用、堆、栈️ 经验都是慢慢积累的，天才不多｜ 第170篇 记得中学的课本上，有一篇名为《狂人日记》课文；</description>
    </item>
    
    <item>
      <title>Java泛型类型擦除以及类型擦除带来的问题</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/java%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4%E4%BB%A5%E5%8F%8A%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4%E5%B8%A6%E6%9D%A5%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/java%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4%E4%BB%A5%E5%8F%8A%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4%E5%B8%A6%E6%9D%A5%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>Java泛型类型擦除以及类型擦除带来的问题 1.Java泛型的实现方法：类型擦除 大家都知道，Java的泛型是伪泛型，这是因为Java在编译期间</description>
    </item>
    
    <item>
      <title>JAVA基础</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/java-imac/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/java-imac/</guid>
      <description>一、基础篇 网络基础 TCP三次握手 1、OSI与TCP/IP 模型 2、常见网络服务分层 3、TCP与UDP区别及场景 4、TCP滑动窗口，拥塞控制 5、</description>
    </item>
    
    <item>
      <title>java垃圾回收机制</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid>
      <description>java垃圾回收 一、jvm内存结构 嗯，前面提到了堆分了「新生代」和 「老年代」，「新生代」又分为「Eden」和「Survivor」区，「Sur</description>
    </item>
    
    <item>
      <title>java内存模型1</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description>java内存模型1 一、为什么有java内存模型？ 背景 现有计算机往往是多核的，每个核心下会有高速缓存。高速缓存的诞生是由于「CPU 与内存（主存</description>
    </item>
    
    <item>
      <title>Java内存模型2</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/java-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/java-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description>Java内存模型2 Spring、Netty、Mybatis 等框架的代码中大量运用了 Java 多线程编程技巧。并发编程处理的恰当与否，将直接影响架构的</description>
    </item>
    
    <item>
      <title>java数据类型</title>
      <link>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>Java基本类型占用字节数（或 bit数） Java 的8大基本类型 既然说的是 Java 8大基本类型的占用字节数，我们先来聊聊 Java 的8大基本类型 整型 int ：整数类型 short</description>
    </item>
    
    <item>
      <title>java线程池</title>
      <link>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>深入理解java线程池—ThreadPoolExecutor 几句闲扯：首先，我想说java的线程池真的是很绕，以前一直都感觉新建几个线程一直</description>
    </item>
    
    <item>
      <title>Java线程池实现原理及其在美团业务中的实践</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%B6%E5%9C%A8%E7%BE%8E%E5%9B%A2%E4%B8%9A%E5%8A%A1%E4%B8%AD%E7%9A%84%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%B6%E5%9C%A8%E7%BE%8E%E5%9B%A2%E4%B8%9A%E5%8A%A1%E4%B8%AD%E7%9A%84%E5%AE%9E%E8%B7%B5/</guid>
      <description>Java线程池实现原理及其在美团业务中的实践 随着计算机行业的飞速发展，摩尔定律逐渐失效，多核CPU成为主流。使用多线程并行计算逐渐成为开发人</description>
    </item>
    
    <item>
      <title>java学习路线图</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE/</guid>
      <description>java学习路线图 项目地址： Github地址：Snailclimb/JavaGuide Gitee地址： SnailClimb/JavaGuid</description>
    </item>
    
    <item>
      <title>java学习路线问题整理</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</guid>
      <description>java学习路线问题整理 Java 基础 为了能让自己写出更优秀的代码，《Effective Java》、《重构》 这两本书没事也可以看 并发 一些关于并发的小</description>
    </item>
    
    <item>
      <title>jvm调优</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/jvm%E8%B0%83%E4%BC%98/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/jvm%E8%B0%83%E4%BC%98/</guid>
      <description>jvm调优 一、优化系统的思路 没有jvm调优经历 一般来说关系型数据库是先到瓶颈，首先排查是否为数据库的问题 （这个过程中就需要评估自己建的索引是</description>
    </item>
    
    <item>
      <title>linux命令which,whereis,locate,find的区别</title>
      <link>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/linux%E5%91%BD%E4%BB%A4whichwhereislocatefind%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/linux%E5%91%BD%E4%BB%A4whichwhereislocatefind%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>linux命令which,whereis,locate,find的区别 which：常用于查找可直接执行的命令。只能查找可执行文件，该命令基本</description>
    </item>
    
    <item>
      <title>Mysql获取每组前N条记录</title>
      <link>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/mysql%E8%8E%B7%E5%8F%96%E6%AF%8F%E7%BB%84%E5%89%8Dn%E6%9D%A1%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/mysql%E8%8E%B7%E5%8F%96%E6%AF%8F%E7%BB%84%E5%89%8Dn%E6%9D%A1%E8%AE%B0%E5%BD%95/</guid>
      <description>Mysql获取每组前N条记录 Select基础知识 我们在实现select语句的时候,通用的sql格式如下: select *columns* from *tables* where *predicae1* group by *columns* having *predicae1* order by *columns* limit *start*, *offset*; 很</description>
    </item>
    
    <item>
      <title>mysql连表操作后字符集不同导致索引失效问题</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/10_01_sql/sql/mysql%E8%BF%9E%E8%A1%A8%E6%93%8D%E4%BD%9C%E5%90%8E%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8D%E5%90%8C%E5%AF%BC%E8%87%B4%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/10_01_sql/sql/mysql%E8%BF%9E%E8%A1%A8%E6%93%8D%E4%BD%9C%E5%90%8E%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8D%E5%90%8C%E5%AF%BC%E8%87%B4%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</guid>
      <description>mysql 连表操作后字符集不同导致索引失效 背景 一个表的字符集为utf8mb4 一个表的字符集为utf8 连表查询后可以发现索引失效的情况，查询很慢。 t1</description>
    </item>
    
    <item>
      <title>mysql连表操作后字符集不同导致索引失效问题1</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/10_01_sql/sql/mysql%E8%BF%9E%E8%A1%A8%E6%93%8D%E4%BD%9C%E5%90%8E%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8D%E5%90%8C%E5%AF%BC%E8%87%B4%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%981/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/10_01_sql/sql/mysql%E8%BF%9E%E8%A1%A8%E6%93%8D%E4%BD%9C%E5%90%8E%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8D%E5%90%8C%E5%AF%BC%E8%87%B4%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%981/</guid>
      <description>mysql 连表操作后字符集不同导致索引失效 背景 一个表的字符集为utf8mb4 一个表的字符集为utf8 连表查询后可以发现索引失效的情况，查询很慢。这时</description>
    </item>
    
    <item>
      <title>Spring SchedulingConfigurer实现动态定时任务(修改)</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/spring-schedulingconfigurer-%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/spring-schedulingconfigurer-%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</guid>
      <description>Spring SchedulingConfigurer 实现动态定时任务 一、前言 大家在日常工作中，一定使用过 Spring 的 @Scheduled 注解吧，通过该注解可以非常方便的帮助我们实现任务的定时执行。 但是该注解是不支持</description>
    </item>
    
    <item>
      <title>sql难点记录</title>
      <link>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/sql%E9%9A%BE%E7%82%B9%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/sql%E9%9A%BE%E7%82%B9%E8%AE%B0%E5%BD%95/</guid>
      <description>sql难点记录 1. The expression subject IN (&amp;lsquo;Chemistry&amp;rsquo;,&amp;lsquo;Physics&amp;rsquo;) can be used as a value - it will be 0 or 1. Show the 1984 winners and subject ordered by subject and winner name; but list Chemistry and Physics last. 这个题目没有中文，翻译的大概意思是 按照获奖的科学领域</description>
    </item>
    
    <item>
      <title>tool.html</title>
      <link>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/tool/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/tool/</guid>
      <description>toolhtml {overflow-x: initial !important;}:root { --bg-color:#ffffff; --text-color:#333333; --select-text-bg-color:#B5D6FC; --select-text-font-color:auto; --monospace:&#34;Lucida Console&#34;,Consolas,&#34;Courier&#34;,monospace; } html { font-size: 14px; background-color: var(--bg-color); color: var(--text-color); font-family: &#34;Helvetica Neue&#34;, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; } body { margin: 0px; padding: 0px; height: auto; bottom: 0px; top: 0px; left: 0px; right: 0px; font-size: 1rem; line-height: 1.42857; overflow-x: hidden; background: inherit; tab-size: 4; } iframe { margin: auto; } a.url { word-break: break-all; } a:active, a:hover { outline:</description>
    </item>
    
    <item>
      <title>常用工具.html</title>
      <link>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</guid>
      <description>toolhtml {overflow-x: initial !important;}:root { --bg-color:#ffffff; --text-color:#333333; --select-text-bg-color:#B5D6FC; --select-text-font-color:auto; --monospace:&#34;Lucida Console&#34;,Consolas,&#34;Courier&#34;,monospace; } html { font-size: 14px; background-color: var(--bg-color); color: var(--text-color); font-family: &#34;Helvetica Neue&#34;, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; } body { margin: 0px; padding: 0px; height: auto; bottom: 0px; top: 0px; left: 0px; right: 0px; font-size: 1rem; line-height: 1.42857; overflow-x: hidden; background: inherit; tab-size: 4; } iframe { margin: auto; } a.url { word-break: break-all; } a:active, a:hover { outline:</description>
    </item>
    
    <item>
      <title>动态规划答疑篇</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AD%94%E7%96%91%E7%AF%87/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AD%94%E7%96%91%E7%AF%87/</guid>
      <description>动态规划答疑篇 预计阅读时间：7 分钟 这篇文章就给你讲明白两个读者问得最多的问题： 1、到底什么才叫「最优子结构」，和动态规划什么关系。 2、为什么</description>
    </item>
    
    <item>
      <title>动态规划设计之最长递增子序列</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AE%BE%E8%AE%A1%E4%B9%8B%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AE%BE%E8%AE%A1%E4%B9%8B%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>动态规划设计之最长递增子序列 预计阅读时间： 9 分钟 很多读者反应，就算看了前文 动态规划详解，了解了动态规划的套路，也不会写状态转移方程，没有思路</description>
    </item>
    
    <item>
      <title>个人博客系统设计(支持hexo和halo同步)</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/17_01_%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E6%94%AF%E6%8C%81hexo%E5%92%8Chalo%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/17_01_%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E6%94%AF%E6%8C%81hexo%E5%92%8Chalo%E5%90%8C%E6%AD%A5/</guid>
      <description>个人博客系统设计(支持hexo和halo同步) 本文主要介绍自己的博客系统是如何设计的，并使用Halo博客同步器 将hexo（git pages: https://linshenkx.github.io ）文章自</description>
    </item>
    
    <item>
      <title>滑动窗口</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</guid>
      <description>滑动窗口算法 滑动窗口算法 滑动窗口框架套路详解 在滑动窗口算法框架中，我编写一首小诗来歌颂滑动窗口算法的伟大： 关于双指针的快慢指针和左右指针</description>
    </item>
    
    <item>
      <title>回溯算法和动态规划，到底谁是谁爹</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E5%92%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%88%B0%E5%BA%95%E8%B0%81%E6%98%AF%E8%B0%81%E7%88%B9/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E5%92%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%88%B0%E5%BA%95%E8%B0%81%E6%98%AF%E8%B0%81%E7%88%B9/</guid>
      <description>回溯算法和动态规划，到底谁是谁爹？ 我们前文经常说回溯算法和递归算法有点类似，有的问题如果实在想不出状态转移方程，尝试用回溯算法暴力解决也是一</description>
    </item>
    
    <item>
      <title>回溯算法团灭排列组合子集问题</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E5%9B%A2%E7%81%AD%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E5%9B%A2%E7%81%AD%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/</guid>
      <description>回溯算法团灭排列/组合/子集问题 回溯算法团灭排列/组合/子集问题 预计阅读时间：7 分钟 今天就来聊三道考察频率高，而且容易让人搞混的算法问题，分</description>
    </item>
    
    <item>
      <title>经典动态规划：0-1 背包问题</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E7%BB%8F%E5%85%B8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%920-1-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E7%BB%8F%E5%85%B8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%920-1-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</guid>
      <description>经典动态规划：0-1 背包问题 后台天天有人问背包问题，这个问题其实不难啊，如果我们号动态规划系列的十几篇文章你都看过，借助框架，遇到背包问题可</description>
    </item>
    
    <item>
      <title>经典动态规划：戳气球问题</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E7%BB%8F%E5%85%B8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%88%B3%E6%B0%94%E7%90%83%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E7%BB%8F%E5%85%B8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%88%B3%E6%B0%94%E7%90%83%E9%97%AE%E9%A2%98/</guid>
      <description>经典动态规划：戳气球问题 今天我们要聊的这道题「Burst Balloon」和之前我们写过的那篇 经典动态规划：高楼扔鸡蛋问题 分析过的高楼扔鸡蛋问</description>
    </item>
    
    <item>
      <title>经典动态规划：高楼扔鸡蛋</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E7%BB%8F%E5%85%B8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%AB%98%E6%A5%BC%E6%89%94%E9%B8%A1%E8%9B%8B/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E7%BB%8F%E5%85%B8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%AB%98%E6%A5%BC%E6%89%94%E9%B8%A1%E8%9B%8B/</guid>
      <description>经典动态规划：高楼扔鸡蛋 手把手刷动态规划 25个 预计阅读时间：7 分钟 今天要聊一个很经典的算法问题，若干层楼，若干个鸡蛋，让你算出最少的尝试次数</description>
    </item>
    
    <item>
      <title>经典动态规划：高楼扔鸡蛋（进阶篇）</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E7%BB%8F%E5%85%B8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%AB%98%E6%A5%BC%E6%89%94%E9%B8%A1%E8%9B%8B%E8%BF%9B%E9%98%B6%E7%AF%87/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E7%BB%8F%E5%85%B8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%AB%98%E6%A5%BC%E6%89%94%E9%B8%A1%E8%9B%8B%E8%BF%9B%E9%98%B6%E7%AF%87/</guid>
      <description>经典动态规划：高楼扔鸡蛋（进阶篇） 手把手刷动态规划 25个 预计阅读时间：9 分钟 我们在 上篇文章 聊了高楼扔鸡蛋问题，讲了一种效率不是很高，但是较为</description>
    </item>
    
    <item>
      <title>经典面试题：如何寻找最⻓回文子串</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A6%82%E4%BD%95%E5%AF%BB%E6%89%BE%E6%9C%80%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A6%82%E4%BD%95%E5%AF%BB%E6%89%BE%E6%9C%80%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</guid>
      <description>经典面试题：如何寻找最⻓回文子串 预计阅读时间：5 分钟 回文串是面试常常遇到的问题（虽然问题本身没啥意义），本文就告诉你回文串问题的核心思想是什</description>
    </item>
    
    <item>
      <title>精度问题</title>
      <link>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/</guid>
      <description>Java中float和double中溢值问题和浮点数的储存问题 记录一下初学Java出现的问题。 以为之前是从Python起步的，最初了解到Ja</description>
    </item>
    
    <item>
      <title>快慢指针的一些证明</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%81%E6%98%8E/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%81%E6%98%8E/</guid>
      <description>快慢指针在链表中的一些证明 目录 一、一定会相遇的证明 二、环长度 三、连接点 四、带环链表总长度 五、例题 一、一定会相遇的证明 证明1 1、如果链表没有环</description>
    </item>
    
    <item>
      <title>流程图</title>
      <link>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/%E6%B5%81%E7%A8%8B%E5%9B%BE/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/%E6%B5%81%E7%A8%8B%E5%9B%BE/</guid>
      <description>graph TD; A--&amp;gt;B; A--&amp;gt;C; B--&amp;gt;D; graph LR A[方形] --&amp;gt;B(圆角) B --&amp;gt; C{条件a} C --&amp;gt;|a=1| D[结果1] C --&amp;gt;|a=2| E[结果2] F[横向流程图] graph TD A[方形] --&amp;gt;B(</description>
    </item>
    
    <item>
      <title>面试官：说说你了解class文件吗？</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E5%AE%98%E8%AF%B4%E8%AF%B4%E4%BD%A0%E4%BA%86%E8%A7%A3class%E6%96%87%E4%BB%B6%E5%90%97/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E5%AE%98%E8%AF%B4%E8%AF%B4%E4%BD%A0%E4%BA%86%E8%A7%A3class%E6%96%87%E4%BB%B6%E5%90%97/</guid>
      <description>面试官：说说你了解class文件吗？ 本文思维导图： Class类文件结构 为什么Java可以一次编译到处运行？JVM无关性 与平台无关性是建立在操</description>
    </item>
    
    <item>
      <title>面试官“谈谈Spring中都用到了那些设计模式”。</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/%E9%9D%A2%E8%AF%95%E5%AE%98%E8%B0%88%E8%B0%88spring%E4%B8%AD%E9%83%BD%E7%94%A8%E5%88%B0%E4%BA%86%E9%82%A3%E4%BA%9B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_03_%E5%AF%B9%E7%BA%BF%E9%9D%A2%E8%AF%95%E5%AE%98/%E9%9D%A2%E8%AF%95%E5%AE%98%E8%B0%88%E8%B0%88spring%E4%B8%AD%E9%83%BD%E7%94%A8%E5%88%B0%E4%BA%86%E9%82%A3%E4%BA%9B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>面试官:“谈谈Spring中都用到了那些设计模式?”。 JDK 中用到了那些设计模式?Spring 中用到了那些设计模式?这两个问题，在面试中比较常见</description>
    </item>
    
    <item>
      <title>如何拆解复杂问题：实现一个计算器</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E5%A6%82%E4%BD%95%E6%8B%86%E8%A7%A3%E5%A4%8D%E6%9D%82%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E5%A6%82%E4%BD%95%E6%8B%86%E8%A7%A3%E5%A4%8D%E6%9D%82%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/</guid>
      <description>如何拆解复杂问题：实现一个计算器 我记得很多大学数据结构的教材上，在讲栈这种数据结构的时候，应该都会用计算器举例，但是有一说一，讲的真的垃圾，</description>
    </item>
    
    <item>
      <title>上线流程</title>
      <link>https://swimminghao1.github.io/post/01%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95/sz%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B/%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/01%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95/sz%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B/%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B/</guid>
      <description>上线流程 编辑jira 详细描述任务及修改内容，填写要发布的前后端应用和提测、上线时间，以及研发负责人、研发人员、测试负责人。 将测试报告（已解密</description>
    </item>
    
    <item>
      <title>上线流程-DESKTOP-J06DG54</title>
      <link>https://swimminghao1.github.io/post/01%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95/sz%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B/%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B-desktop-j06dg54/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/01%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95/sz%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B/%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B-desktop-j06dg54/</guid>
      <description>上线流程 编辑jira 详细描述任务及修改内容，填写要发布的前后端应用和提测、上线时间，以及研发负责人、研发人员、测试负责人。 将测试报告（已解密</description>
    </item>
    
    <item>
      <title>上线流程(复件)</title>
      <link>https://swimminghao1.github.io/post/01%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95/sz%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B/%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B%E5%A4%8D%E4%BB%B6/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/01%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95/sz%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B/%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B%E5%A4%8D%E4%BB%B6/</guid>
      <description>上线流程 提交开发任务 在jira上详细描述任务及修改内容，填写要发布的前后端应用和提测、上线时间，以及研发负责人、研发人员、测试负责人。 设计文</description>
    </item>
    
    <item>
      <title>上线流程(另一个复件)</title>
      <link>https://swimminghao1.github.io/post/01%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95/sz%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B/%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%A4%8D%E4%BB%B6/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/01%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95/sz%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B/%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%A4%8D%E4%BB%B6/</guid>
      <description>上线流程 编辑jira 详细描述任务及修改内容，填写要发布的前后端应用和提测、上线时间，以及研发负责人、研发人员、测试负责人。 将测试报告（已解密</description>
    </item>
    
    <item>
      <title>设计模式</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/15_01_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/15_01_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>常用设计模式 1.观察者模式 定义：在对象之间定义了一对多的依赖，这样的话，当一个对象改变状态，依赖他的对象会受到通知并自动更新。（其实就是发布</description>
    </item>
    
    <item>
      <title>设计模式2</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/15_01_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-2/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/15_01_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-2/</guid>
      <description>设计模式2 1.观察者模式 定义：在对象之间定义了一对多的依赖，这样的话，当一个对象改变状态，依赖他的对象会受到通知并自动更新。（其实就是发布订</description>
    </item>
    
    <item>
      <title>双亲委派机制</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6/</guid>
      <description>双亲委派机制 一、双亲委派机制 class文件是通过类加载器加载到jvm中的 为了防止内存中存在多份同样的字节码，使用了双亲委派机制（不会自己加载</description>
    </item>
    
    <item>
      <title>算法中文手册</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/</guid>
      <description>[toc] 开篇词 第零章、必读系列 学习算法和刷题的框架思维 动态规划解题套路框架 回溯算法解题套路框架 BFS 算法解题套路框架 我写了首诗，让你闭着眼睛也能写对二</description>
    </item>
    
    <item>
      <title>完全二叉树的节点数，你真的会算吗？</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E6%95%B0%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9A%E7%AE%97%E5%90%97/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E6%95%B0%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9A%E7%AE%97%E5%90%97/</guid>
      <description>完全二叉树的节点数，你真的会算吗？ 如果让你数一下一棵普通二叉树有多少个节点，这很简单，只要在二叉树的遍历框架上加一点代码就行了。 但是，如果给</description>
    </item>
    
    <item>
      <title>线程池</title>
      <link>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/08%E5%AD%98%E6%A1%A3%E6%96%87%E4%BB%B6/%E6%96%87%E6%A1%A3/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>线程池 ThreadPool源码学习 zodiac ·2020-12-10 ·20 次阅读 ThreadPoolExecutor jdk1.5在juc包里提供了方便快捷的线程池api，并提供了基于工</description>
    </item>
    
    <item>
      <title>线程与进程</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/06_02_java%E9%9D%A2%E8%AF%95/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/</guid>
      <description>线程与进程 一、进程 计算机内存空间 ​ 用户空间装着用户进程需要使用的资源，比如你在程序代码里开一个数组， 这个数组肯定存在用户空间;内核空间存放内</description>
    </item>
    
    <item>
      <title>一个函数秒杀 2Sum 3Sum 4Sum 问题</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E7%A7%92%E6%9D%80-2sum-3sum-4sum-%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E7%A7%92%E6%9D%80-2sum-3sum-4sum-%E9%97%AE%E9%A2%98/</guid>
      <description>一个函数秒杀 2Sum 3Sum 4Sum 问题 经常刷 LeetCode 的读者肯定知道鼎鼎有名的 twoSum 问题，我们的旧文 Two Sum 问题的核心思想 对 twoSum 的几个变种做了解析。 但是除了 twoSum 问题，LeetC</description>
    </item>
    
    <item>
      <title>益智游戏克星：BFS暴力搜索算法</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E7%9B%8A%E6%99%BA%E6%B8%B8%E6%88%8F%E5%85%8B%E6%98%9Fbfs%E6%9A%B4%E5%8A%9B%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E7%9B%8A%E6%99%BA%E6%B8%B8%E6%88%8F%E5%85%8B%E6%98%9Fbfs%E6%9A%B4%E5%8A%9B%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/</guid>
      <description>益智游戏克星：BFS暴力搜索算法 益智游戏克星：BFS暴力搜索算法 滑动拼图游戏大家应该都玩过，下图是一个 4x4 的滑动拼图： 拼图中有一个格子是空的，</description>
    </item>
    
    <item>
      <title>子序列解题模板：最长回文子序列</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E5%AD%90%E5%BA%8F%E5%88%97%E8%A7%A3%E9%A2%98%E6%A8%A1%E6%9D%BF%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Mon, 28 Feb 2022 19:57:47 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/13_01_%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/leetcode/%E5%AD%90%E5%BA%8F%E5%88%97%E8%A7%A3%E9%A2%98%E6%A8%A1%E6%9D%BF%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>子序列解题模板：最长回文子序列 预计阅读时间：6 分钟 子序列问题是常见的算法问题，而且并不好解决。 首先，子序列问题本身就相对子串、子数组更困难一</description>
    </item>
    
    <item>
      <title>hexo同步</title>
      <link>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/17_01_%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/hexo%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://swimminghao1.github.io/post/02%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/17_01_%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/hexo%E5%90%8C%E6%AD%A5/</guid>
      <description>hexo同步 以下操作在你的第二个平台上进行，并确定已安装 node.js &amp;amp; npm。 在你想要同步博客的文件夹下执行 git clone &amp;lt;远端博客仓库地址&amp;gt; cd # 进</description>
    </item>
    
  </channel>
</rss>
